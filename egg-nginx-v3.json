{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-06-23T20:47:50+02:00",
    "name": "CraftNode Nginx Egg",
    "author": "admin@craftnode.eu",
    "description": "CraftNode Nginx Egg\n\nA web server solution for Pterodactyl, featuring Nginx, PHP, Git support, Cloudflare Tunnel integration, composer and optional WordPress installation. It supports AMD64 & ARM64 architectures and allows users to choose their preferred PHP version (8.0 – 8.4).\nKey Features:\n\n✅ Supports multiple PHP versions\n✅ Git integration for automatic deployment\n✅ Cloudflare Tunnel support for secure remote access\n✅ Optional WordPress setup\n✅ HTTPS configuration support\n✅ Automatic updates for Git repositories",
    "features": null,
    "docker_images": {
        "ghcr.io\/ym0t\/pterodactyl-nginx-egg:8.4-latest": "ghcr.io\/ym0t\/pterodactyl-nginx-egg:8.4-latest",
        "ghcr.io\/ym0t\/pterodactyl-nginx-egg:8.3-latest": "ghcr.io\/ym0t\/pterodactyl-nginx-egg:8.3-latest",
        "ghcr.io\/ym0t\/pterodactyl-nginx-egg:8.2-latest": "ghcr.io\/ym0t\/pterodactyl-nginx-egg:8.2-latest",
        "ghcr.io\/ym0t\/pterodactyl-nginx-egg:8.1-latest": "ghcr.io\/ym0t\/pterodactyl-nginx-egg:8.1-latest"
    },
    "file_denylist": [],
    "startup": ".\/start-modules.sh",
    "config": {
        "files": "{\r\n    \"nginx\/conf.d\/default.conf\": {\r\n        \"parser\": \"file\",\r\n        \"find\": {\r\n            \"    listen\": \"    listen {{server.build.default.port}};\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \"Services successfully launched\"\r\n}",
        "logs": "{\r\n    \"location\": \"logs\/latest.log\"\r\n}",
        "stop": "^C & ^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\n\n# [SETUP] Install packages\necho -e \"[SETUP] Installing required packages\"\napt-get update -qq > /dev/null 2>&1 && apt-get install -qq -y git wget perl perl-doc fcgiwrap > /dev/null 2>&1\n\n# Get version\nwget -q -O - https://api.tavuru.de/version/ItzKubass/nginx-pterodactyl-egg | grep -o '\"version\":\"[^\"]*\"' | cut -d'\"' -f4 | head -1 > /mnt/server/VERSION\n\n# Prepare directories\ncd /mnt/server\nmkdir -p logs tmp www\n\n# Clone config repo\necho \"[SETUP] Cloning configuration repository\"\ngit clone https://github.com/ItzKubass/nginx-pterodactyl-egg /mnt/server/gtemp > /dev/null 2>&1 || { echo \"[ERROR] Failed to clone config repo\"; exit 21; }\n\n# Copy core files\ncp -r /mnt/server/gtemp/nginx /mnt/server/ || { echo \"[ERROR] Failed to copy nginx config\"; exit 22; }\ncp -r /mnt/server/gtemp/php /mnt/server/ || { echo \"[ERROR] Failed to copy php config\"; exit 23; }\ncp -r /mnt/server/gtemp/modules /mnt/server/ || { echo \"[ERROR] Failed to copy modules\"; exit 24; }\ncp /mnt/server/gtemp/start-modules.sh /mnt/server/ && chmod +x /mnt/server/start-modules.sh || { echo \"[ERROR] Failed to setup modules\"; exit 25; }\nfind /mnt/server/modules -name \"*.sh\" -exec chmod +x {} \\;\n\n# Handle content deployment\nif [ -n \"${GIT_ADDRESS}\" ]; then\n    # Git repo (highest priority)\n    echo \"[GIT] Cloning user repository\"\n    [[ ${GIT_ADDRESS} != *.git ]] && GIT_ADDRESS=\"${GIT_ADDRESS}.git\"\n    \n    if [ -n \"${USERNAME}\" ] && [ -n \"${ACCESS_TOKEN}\" ]; then\n        GIT_AUTH_URL=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo ${GIT_ADDRESS} | sed -e 's/https:\\/\\///g')\"\n        git clone ${GIT_AUTH_URL} /mnt/server/www > /dev/null 2>&1 || { echo \"[GIT] Clone failed\"; exit 30; }\n    else\n        git clone ${GIT_ADDRESS} /mnt/server/www > /dev/null 2>&1 || { echo \"[GIT] Clone failed\"; exit 31; }\n    fi\n    \n    [ -n \"${BRANCH}\" ] && git -C /mnt/server/www checkout ${BRANCH} > /dev/null 2>&1\n\nelif [ \"${WORDPRESS}\" == \"1\" ] || [ \"${WORDPRESS}\" == \"true\" ]; then\n    # WordPress (medium priority)\n    echo \"[WORDPRESS] Installing latest version\"\n    cd /mnt/server/www\n    wget -q https://wordpress.org/latest.tar.gz || { echo \"[WORDPRESS] Download failed\"; exit 40; }\n    tar -xzf latest.tar.gz --strip-components=1\n    rm -f latest.tar.gz\n\nelse\n    # Default files (low priority - your content)\n    echo \"[SETUP] Copying default content\"\n    cp /mnt/server/gtemp/www/index.html /mnt/server/www/ || { echo \"[ERROR] Failed to copy index.html\"; exit 50; }\n    cp /mnt/server/gtemp/www/logo.png /mnt/server/www/ || { echo \"[ERROR] Failed to copy logo.png\"; exit 51; }\nfi\n\n# Cleanup\nrm -rf /mnt/server/gtemp\necho -e \"\n[DONE] Installation complete\"\necho -e \"[INFO] Server type: ${WORDPRESS:+WordPress}${GIT_ADDRESS:+Git repo}${WORDPRESS:-${GIT_ADDRESS:-Default files}}\"",
            "container": "debian:bookworm-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Enable Auto-Update",
            "description": "Automatically check for updates on startup using the Tavuru API",
            "env_variable": "AUTOUPDATE_STATUS",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Force Auto-Update",
            "description": "Automatically download and apply updates without confirmation (requires Auto-Update enabled)",
            "env_variable": "AUTOUPDATE_FORCE",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "PHP Version",
            "description": "Select the correct PHP version! See the tag behind the Docker image.  \r\nExample: Selected image (ghcr.io\/ym0t\/nginx_php:8.4)\r\nEnter in the field: 8.4",
            "env_variable": "PHP_VERSION",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:3",
            "field_type": "text"
        },
        {
            "name": "Wordpress",
            "description": "Enable or disable Wordpress \r\n\r\n0 = false (default) \r\n1 = true",
            "env_variable": "WORDPRESS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Enable LogCleaner Module",
            "description": "Set to true to run the log cleanup module on container startup, or false to disable it.",
            "env_variable": "LOGCLEANER_STATUS",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "boolean"
        },     
        {
            "name": "Enable Git Module",
            "description": "Set to true to enable the Git update module, or false to disable it.",
            "env_variable": "GIT_STATUS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Git Repo Address",
            "description": "Git repo to clone\r\n\r\nI.E. https:\/\/github.com\/ItzKubass\/nginx-pterodactyl-egg",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Branch",
            "description": "What branch to pull from github.\r\n\r\nDefault is blank to pull the repo default branch",
            "env_variable": "BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Username",
            "description": "Username to auth with git.",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Access Token",
            "description": "Password to use with git.\r\n\r\nIt's best practice to use a Personal Access Token.\r\nhttps:\/\/github.com\/settings\/tokens\r\nhttps:\/\/gitlab.com\/-\/profile\/personal_access_tokens",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Enable Cloudflare Tunnel",
            "description": "Set to true to start the Cloudflared tunnel on container startup, or false to skip it.",
            "env_variable": "CLOUDFLARED_STATUS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Cloudflared Tunnel Token",
            "description": "The authentication token used to connect to the Cloudflare Tunnel service (typically starts with \"ey...\").",
            "env_variable": "CLOUDFLARED_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|regex:\/^[A-Za-z0-9_-]+$\/",
            "field_type": "text"
        },
        {
            "name": "Enable Composer Module",
            "description": "Enable or disable Composer package installation",
            "env_variable": "COMPOSER_STATUS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Composer Packages",
            "description": "Space-separated list of Composer packages to install",
            "env_variable": "COMPOSER_MODULES",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Enable Cron Module",
            "description": "Enable cron job scheduling for automated tasks like Laravel scheduler",
            "env_variable": "CRON_STATUS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Cron Config File",
            "description": "Path to crontab configuration file",
            "env_variable": "CRON_CONFIG_FILE",
            "default_value": "/home/container/crontab",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        }
    ]
}
